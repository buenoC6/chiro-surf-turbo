//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class AdminClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return OK
     */
    loginAdmin(body: LoginAdminRequest | undefined, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Admin/LoginAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLoginAdmin(_response);
        });
    }

    protected processLoginAdmin(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class AnimalsClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return OK
     */
    dropdown(body: GetAllAnimalsRequest | undefined, cancelToken?: CancelToken): Promise<DropdownValue[]> {
        let url_ = this.baseUrl + "/api/Animals/Dropdown";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDropdown(_response);
        });
    }

    protected processDropdown(response: AxiosResponse): Promise<DropdownValue[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropdownValue.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropdownValue[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropdownValue[]>(null as any);
    }
}

export class ClientGeneratorClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    getBackofficeClient( cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/GetBackofficeClient";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBackofficeClient(_response);
        });
    }

    protected processGetBackofficeClient(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getVetClient( cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/GetVetClient";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVetClient(_response);
        });
    }

    protected processGetVetClient(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getOwnerClient( cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/GetOwnerClient";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOwnerClient(_response);
        });
    }

    protected processGetOwnerClient(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return OK
     */
    getPublicClient( cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/GetPublicClient";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPublicClient(_response);
        });
    }

    protected processGetPublicClient(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class InscriptionClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    vetInscription(body: InscriptionVetRequest | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Inscription/VetInscription";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVetInscription(_response);
        });
    }

    protected processVetInscription(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    validateMailToken(userId: string, token: string, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Inscription/ValidateMailToken?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined and cannot be null.");
        else
            url_ += "Token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateMailToken(_response);
        });
    }

    protected processValidateMailToken(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 302) {
            const _responseText = response.data;
            return throwException("Found", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ProcedureClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return No Content
     */
    addProcedures(body: AddProcedureRequest | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Procedure/AddProcedures";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddProcedures(_response);
        });
    }

    protected processAddProcedures(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    dropdown2(body: GetAllProceduresRequest | undefined, cancelToken?: CancelToken): Promise<DropdownValue[]> {
        let url_ = this.baseUrl + "/api/Procedure/Dropdown";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDropdown2(_response);
        });
    }

    protected processDropdown2(response: AxiosResponse): Promise<DropdownValue[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropdownValue.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropdownValue[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropdownValue[]>(null as any);
    }
}

export class PublicClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param input (optional) 
     * @param countryCode (optional) 
     * @return OK
     */
    autocomplete(input: string | undefined, countryCode: string | undefined, cancelToken?: CancelToken): Promise<PlaceAutocompleteResult[]> {
        let url_ = this.baseUrl + "/api/Public/Autocomplete?";
        if (input === null)
            throw new Error("The parameter 'input' cannot be null.");
        else if (input !== undefined)
            url_ += "input=" + encodeURIComponent("" + input) + "&";
        if (countryCode === null)
            throw new Error("The parameter 'countryCode' cannot be null.");
        else if (countryCode !== undefined)
            url_ += "countryCode=" + encodeURIComponent("" + countryCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAutocomplete(_response);
        });
    }

    protected processAutocomplete(response: AxiosResponse): Promise<PlaceAutocompleteResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaceAutocompleteResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaceAutocompleteResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaceAutocompleteResult[]>(null as any);
    }

    /**
     * @param latitude (optional) 
     * @param longitude (optional) 
     * @return OK
     */
    getAdresseWithCoordonate(latitude: number | undefined, longitude: number | undefined, cancelToken?: CancelToken): Promise<Address> {
        let url_ = this.baseUrl + "/api/Public/GetAdresseWithCoordonate?";
        if (latitude === null)
            throw new Error("The parameter 'latitude' cannot be null.");
        else if (latitude !== undefined)
            url_ += "latitude=" + encodeURIComponent("" + latitude) + "&";
        if (longitude === null)
            throw new Error("The parameter 'longitude' cannot be null.");
        else if (longitude !== undefined)
            url_ += "longitude=" + encodeURIComponent("" + longitude) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAdresseWithCoordonate(_response);
        });
    }

    protected processGetAdresseWithCoordonate(response: AxiosResponse): Promise<Address> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Address.fromJS(resultData200);
            return Promise.resolve<Address>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Address>(null as any);
    }

    /**
     * @param email (optional) 
     * @return Accepted
     */
    sendEmailResetPassword(email: string | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Public/SendEmailResetPassword?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSendEmailResetPassword(_response);
        });
    }

    protected processSendEmailResetPassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 202) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param email (optional) 
     * @param token (optional) 
     * @param password (optional) 
     * @return Accepted
     */
    resetPassword(email: string | undefined, token: string | undefined, password: string | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Public/ResetPassword?";
        if (email === null)
            throw new Error("The parameter 'email' cannot be null.");
        else if (email !== undefined)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processResetPassword(_response);
        });
    }

    protected processResetPassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 202) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class RessourcesClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    getCountryCode( cancelToken?: CancelToken): Promise<CountryCode[]> {
        let url_ = this.baseUrl + "/api/Ressources/GetCountryCode";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCountryCode(_response);
        });
    }

    protected processGetCountryCode(response: AxiosResponse): Promise<CountryCode[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CountryCode.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CountryCode[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CountryCode[]>(null as any);
    }
}

export class VetClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getVets(body: GetVetsRequest | undefined, cancelToken?: CancelToken): Promise<GetVetsResponse> {
        let url_ = this.baseUrl + "/api/Vet/GetVets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVets(_response);
        });
    }

    protected processGetVets(response: AxiosResponse): Promise<GetVetsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetVetsResponse.fromJS(resultData200);
            return Promise.resolve<GetVetsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetVetsResponse>(null as any);
    }

    /**
     * @return OK
     */
    getVetPublicProfile(vetId: number, cancelToken?: CancelToken): Promise<GetVetPublicProfileResponse> {
        let url_ = this.baseUrl + "/api/Vet/GetVetPublicProfile/{vetId}";
        if (vetId === undefined || vetId === null)
            throw new Error("The parameter 'vetId' must be defined.");
        url_ = url_.replace("{vetId}", encodeURIComponent("" + vetId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVetPublicProfile(_response);
        });
    }

    protected processGetVetPublicProfile(response: AxiosResponse): Promise<GetVetPublicProfileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetVetPublicProfileResponse.fromJS(resultData200);
            return Promise.resolve<GetVetPublicProfileResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetVetPublicProfileResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getVetMapPublic(body: GetVetMapPublicRequest | undefined, cancelToken?: CancelToken): Promise<GetVetMapPublicResponse[]> {
        let url_ = this.baseUrl + "/api/Vet/GetVetMapPublic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVetMapPublic(_response);
        });
    }

    protected processGetVetMapPublic(response: AxiosResponse): Promise<GetVetMapPublicResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetVetMapPublicResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GetVetMapPublicResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetVetMapPublicResponse[]>(null as any);
    }

    /**
     * @param vetId (optional) 
     * @return OK
     */
    getImmediateAvailability(vetId: number | undefined, cancelToken?: CancelToken): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Vet/GetImmediateAvailability?";
        if (vetId === null)
            throw new Error("The parameter 'vetId' cannot be null.");
        else if (vetId !== undefined)
            url_ += "vetId=" + encodeURIComponent("" + vetId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetImmediateAvailability(_response);
        });
    }

    protected processGetImmediateAvailability(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getSchedule(body: GetScheduleRequest | undefined, cancelToken?: CancelToken): Promise<Schedule[]> {
        let url_ = this.baseUrl + "/api/Vet/GetSchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSchedule(_response);
        });
    }

    protected processGetSchedule(response: AxiosResponse): Promise<Schedule[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Schedule.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Schedule[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Schedule[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginVetRequest | undefined, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Vet/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export class AccessibilityAndParking implements IAccessibilityAndParking {
    accessibility?: string | undefined;
    parking?: string | undefined;
    transport?: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: IAccessibilityAndParking) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessibility = _data["accessibility"];
            this.parking = _data["parking"];
            this.transport = _data["transport"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): AccessibilityAndParking {
        data = typeof data === 'object' ? data : {};
        let result = new AccessibilityAndParking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessibility"] = this.accessibility;
        data["parking"] = this.parking;
        data["transport"] = this.transport;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IAccessibilityAndParking {
    accessibility?: string | undefined;
    parking?: string | undefined;
    transport?: string | undefined;
    isCompleted?: boolean;
}

export class AddProcedureRequest implements IAddProcedureRequest {
    name!: string | undefined;

    constructor(data?: IAddProcedureRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddProcedureRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddProcedureRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IAddProcedureRequest {
    name: string | undefined;
}

export class Address implements IAddress {
    street!: string | undefined;
    streetNumber!: string | undefined;
    city!: string | undefined;
    zipCode!: string | undefined;
    countryCode!: string | undefined;
    box?: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.street = _data["street"];
            this.streetNumber = _data["streetNumber"];
            this.city = _data["city"];
            this.zipCode = _data["zipCode"];
            this.countryCode = _data["countryCode"];
            this.box = _data["box"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["streetNumber"] = this.streetNumber;
        data["city"] = this.city;
        data["zipCode"] = this.zipCode;
        data["countryCode"] = this.countryCode;
        data["box"] = this.box;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IAddress {
    street: string | undefined;
    streetNumber: string | undefined;
    city: string | undefined;
    zipCode: string | undefined;
    countryCode: string | undefined;
    box?: string | undefined;
    isCompleted?: boolean;
}

export class Appointment implements IAppointment {
    appointmentText?: string | undefined;
    appointmentEmergencyText?: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: IAppointment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appointmentText = _data["appointmentText"];
            this.appointmentEmergencyText = _data["appointmentEmergencyText"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): Appointment {
        data = typeof data === 'object' ? data : {};
        let result = new Appointment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appointmentText"] = this.appointmentText;
        data["appointmentEmergencyText"] = this.appointmentEmergencyText;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IAppointment {
    appointmentText?: string | undefined;
    appointmentEmergencyText?: string | undefined;
    isCompleted?: boolean;
}

export enum AvailabilityStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class Coordonate implements ICoordonate {
    lastName!: string | undefined;
    firstName!: string | undefined;
    officeName?: string | undefined;
    phone!: string | undefined;
    email!: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: ICoordonate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lastName = _data["lastName"];
            this.firstName = _data["firstName"];
            this.officeName = _data["officeName"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): Coordonate {
        data = typeof data === 'object' ? data : {};
        let result = new Coordonate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastName"] = this.lastName;
        data["firstName"] = this.firstName;
        data["officeName"] = this.officeName;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface ICoordonate {
    lastName: string | undefined;
    firstName: string | undefined;
    officeName?: string | undefined;
    phone: string | undefined;
    email: string | undefined;
    isCompleted?: boolean;
}

export class CountryCode implements ICountryCode {
    id?: number;
    code?: string | undefined;

    constructor(data?: ICountryCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CountryCode {
        data = typeof data === 'object' ? data : {};
        let result = new CountryCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        return data;
    }
}

export interface ICountryCode {
    id?: number;
    code?: string | undefined;
}

export enum DayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class DaySlot implements IDaySlot {
    id?: number;
    isDayClose?: boolean;
    day?: DayOfWeek;
    timeSlots?: TimeSlot[] | undefined;

    constructor(data?: IDaySlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isDayClose = _data["isDayClose"];
            this.day = _data["day"];
            if (Array.isArray(_data["timeSlots"])) {
                this.timeSlots = [] as any;
                for (let item of _data["timeSlots"])
                    this.timeSlots!.push(TimeSlot.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DaySlot {
        data = typeof data === 'object' ? data : {};
        let result = new DaySlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isDayClose"] = this.isDayClose;
        data["day"] = this.day;
        if (Array.isArray(this.timeSlots)) {
            data["timeSlots"] = [];
            for (let item of this.timeSlots)
                data["timeSlots"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDaySlot {
    id?: number;
    isDayClose?: boolean;
    day?: DayOfWeek;
    timeSlots?: TimeSlot[] | undefined;
}

export class DropdownValue implements IDropdownValue {
    id!: number;
    name!: string | undefined;

    constructor(data?: IDropdownValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): DropdownValue {
        data = typeof data === 'object' ? data : {};
        let result = new DropdownValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IDropdownValue {
    id: number;
    name: string | undefined;
}

export class Emergency implements IEmergency {
    emergencyAnimal?: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: IEmergency) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emergencyAnimal = _data["emergencyAnimal"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): Emergency {
        data = typeof data === 'object' ? data : {};
        let result = new Emergency();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emergencyAnimal"] = this.emergencyAnimal;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IEmergency {
    emergencyAnimal?: string | undefined;
    isCompleted?: boolean;
}

export enum ExerciseType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class GetAllAnimalsRequest implements IGetAllAnimalsRequest {
    name?: string | undefined;

    constructor(data?: IGetAllAnimalsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetAllAnimalsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllAnimalsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IGetAllAnimalsRequest {
    name?: string | undefined;
}

export class GetAllProceduresRequest implements IGetAllProceduresRequest {
    name?: string | undefined;

    constructor(data?: IGetAllProceduresRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetAllProceduresRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllProceduresRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IGetAllProceduresRequest {
    name?: string | undefined;
}

export class GetScheduleRequest implements IGetScheduleRequest {
    date!: Date;
    daysToGet!: number;

    constructor(data?: IGetScheduleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.daysToGet = _data["daysToGet"];
        }
    }

    static fromJS(data: any): GetScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["daysToGet"] = this.daysToGet;
        return data;
    }
}

export interface IGetScheduleRequest {
    date: Date;
    daysToGet: number;
}

export class GetVetMapPublicRequest implements IGetVetMapPublicRequest {
    pageSize?: number;
    pageNumber?: number;
    search?: string | undefined;
    animalIds?: number[] | undefined;
    procedureIds?: number[] | undefined;
    languages?: string[] | undefined;
    isEmergency?: boolean;
    exerciseType?: ExerciseType;
    address?: string | undefined;
    lat?: number | undefined;
    long?: number | undefined;

    constructor(data?: IGetVetMapPublicRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.search = _data["search"];
            if (Array.isArray(_data["animalIds"])) {
                this.animalIds = [] as any;
                for (let item of _data["animalIds"])
                    this.animalIds!.push(item);
            }
            if (Array.isArray(_data["procedureIds"])) {
                this.procedureIds = [] as any;
                for (let item of _data["procedureIds"])
                    this.procedureIds!.push(item);
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            this.isEmergency = _data["isEmergency"];
            this.exerciseType = _data["exerciseType"];
            this.address = _data["address"];
            this.lat = _data["lat"];
            this.long = _data["long"];
        }
    }

    static fromJS(data: any): GetVetMapPublicRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetVetMapPublicRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["search"] = this.search;
        if (Array.isArray(this.animalIds)) {
            data["animalIds"] = [];
            for (let item of this.animalIds)
                data["animalIds"].push(item);
        }
        if (Array.isArray(this.procedureIds)) {
            data["procedureIds"] = [];
            for (let item of this.procedureIds)
                data["procedureIds"].push(item);
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        data["isEmergency"] = this.isEmergency;
        data["exerciseType"] = this.exerciseType;
        data["address"] = this.address;
        data["lat"] = this.lat;
        data["long"] = this.long;
        return data;
    }
}

export interface IGetVetMapPublicRequest {
    pageSize?: number;
    pageNumber?: number;
    search?: string | undefined;
    animalIds?: number[] | undefined;
    procedureIds?: number[] | undefined;
    languages?: string[] | undefined;
    isEmergency?: boolean;
    exerciseType?: ExerciseType;
    address?: string | undefined;
    lat?: number | undefined;
    long?: number | undefined;
}

export class GetVetMapPublicResponse implements IGetVetMapPublicResponse {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    officeName?: string | undefined;
    latitude?: number;
    longitude?: number;
    distance?: number | undefined;
    animalNames?: string[] | undefined;
    procedureNames?: string[] | undefined;
    readonly phone?: string | undefined;
    immediateAvailability?: AvailabilityStatus;

    constructor(data?: IGetVetMapPublicResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.officeName = _data["officeName"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.distance = _data["distance"];
            if (Array.isArray(_data["animalNames"])) {
                this.animalNames = [] as any;
                for (let item of _data["animalNames"])
                    this.animalNames!.push(item);
            }
            if (Array.isArray(_data["procedureNames"])) {
                this.procedureNames = [] as any;
                for (let item of _data["procedureNames"])
                    this.procedureNames!.push(item);
            }
            (<any>this).phone = _data["phone"];
            this.immediateAvailability = _data["immediateAvailability"];
        }
    }

    static fromJS(data: any): GetVetMapPublicResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetVetMapPublicResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["officeName"] = this.officeName;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["distance"] = this.distance;
        if (Array.isArray(this.animalNames)) {
            data["animalNames"] = [];
            for (let item of this.animalNames)
                data["animalNames"].push(item);
        }
        if (Array.isArray(this.procedureNames)) {
            data["procedureNames"] = [];
            for (let item of this.procedureNames)
                data["procedureNames"].push(item);
        }
        data["phone"] = this.phone;
        data["immediateAvailability"] = this.immediateAvailability;
        return data;
    }
}

export interface IGetVetMapPublicResponse {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    officeName?: string | undefined;
    latitude?: number;
    longitude?: number;
    distance?: number | undefined;
    animalNames?: string[] | undefined;
    procedureNames?: string[] | undefined;
    phone?: string | undefined;
    immediateAvailability?: AvailabilityStatus;
}

export class GetVetPublicProfileResponse implements IGetVetPublicProfileResponse {
    readonly value?: any | undefined;
    readonly index?: number;
    readonly isT0?: boolean;
    readonly isT1?: boolean;
    asT0?: PublicVet;
    asT1?: InvalidId;

    constructor(data?: IGetVetPublicProfileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).value = _data["value"];
            (<any>this).index = _data["index"];
            (<any>this).isT0 = _data["isT0"];
            (<any>this).isT1 = _data["isT1"];
            this.asT0 = _data["asT0"] ? PublicVet.fromJS(_data["asT0"]) : <any>undefined;
            this.asT1 = _data["asT1"] ? InvalidId.fromJS(_data["asT1"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVetPublicProfileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetVetPublicProfileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["index"] = this.index;
        data["isT0"] = this.isT0;
        data["isT1"] = this.isT1;
        data["asT0"] = this.asT0 ? this.asT0.toJSON() : <any>undefined;
        data["asT1"] = this.asT1 ? this.asT1.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetVetPublicProfileResponse {
    value?: any | undefined;
    index?: number;
    isT0?: boolean;
    isT1?: boolean;
    asT0?: PublicVet;
    asT1?: InvalidId;
}

export class GetVetsRequest implements IGetVetsRequest {
    pageSize?: number;
    pageNumber?: number;
    search?: string | undefined;
    animalIds?: number[] | undefined;
    procedureIds?: number[] | undefined;
    languages?: string[] | undefined;
    isEmergency?: boolean;
    exerciseType?: ExerciseType;
    address?: string | undefined;
    lat?: number | undefined;
    long?: number | undefined;

    constructor(data?: IGetVetsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.search = _data["search"];
            if (Array.isArray(_data["animalIds"])) {
                this.animalIds = [] as any;
                for (let item of _data["animalIds"])
                    this.animalIds!.push(item);
            }
            if (Array.isArray(_data["procedureIds"])) {
                this.procedureIds = [] as any;
                for (let item of _data["procedureIds"])
                    this.procedureIds!.push(item);
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            this.isEmergency = _data["isEmergency"];
            this.exerciseType = _data["exerciseType"];
            this.address = _data["address"];
            this.lat = _data["lat"];
            this.long = _data["long"];
        }
    }

    static fromJS(data: any): GetVetsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetVetsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["search"] = this.search;
        if (Array.isArray(this.animalIds)) {
            data["animalIds"] = [];
            for (let item of this.animalIds)
                data["animalIds"].push(item);
        }
        if (Array.isArray(this.procedureIds)) {
            data["procedureIds"] = [];
            for (let item of this.procedureIds)
                data["procedureIds"].push(item);
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        data["isEmergency"] = this.isEmergency;
        data["exerciseType"] = this.exerciseType;
        data["address"] = this.address;
        data["lat"] = this.lat;
        data["long"] = this.long;
        return data;
    }
}

export interface IGetVetsRequest {
    pageSize?: number;
    pageNumber?: number;
    search?: string | undefined;
    animalIds?: number[] | undefined;
    procedureIds?: number[] | undefined;
    languages?: string[] | undefined;
    isEmergency?: boolean;
    exerciseType?: ExerciseType;
    address?: string | undefined;
    lat?: number | undefined;
    long?: number | undefined;
}

export class GetVetsResponse implements IGetVetsResponse {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    officeName?: string | undefined;
    addresses?: Address;
    animalNames?: string[] | undefined;
    procedureNames?: string[] | undefined;
    distance?: number | undefined;
    exerciseType?: ExerciseType;
    profileImageUrl?: string | undefined;
    immediateAvailability?: AvailabilityStatus;

    constructor(data?: IGetVetsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.officeName = _data["officeName"];
            this.addresses = _data["addresses"] ? Address.fromJS(_data["addresses"]) : <any>undefined;
            if (Array.isArray(_data["animalNames"])) {
                this.animalNames = [] as any;
                for (let item of _data["animalNames"])
                    this.animalNames!.push(item);
            }
            if (Array.isArray(_data["procedureNames"])) {
                this.procedureNames = [] as any;
                for (let item of _data["procedureNames"])
                    this.procedureNames!.push(item);
            }
            this.distance = _data["distance"];
            this.exerciseType = _data["exerciseType"];
            this.profileImageUrl = _data["profileImageUrl"];
            this.immediateAvailability = _data["immediateAvailability"];
        }
    }

    static fromJS(data: any): GetVetsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetVetsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["officeName"] = this.officeName;
        data["addresses"] = this.addresses ? this.addresses.toJSON() : <any>undefined;
        if (Array.isArray(this.animalNames)) {
            data["animalNames"] = [];
            for (let item of this.animalNames)
                data["animalNames"].push(item);
        }
        if (Array.isArray(this.procedureNames)) {
            data["procedureNames"] = [];
            for (let item of this.procedureNames)
                data["procedureNames"].push(item);
        }
        data["distance"] = this.distance;
        data["exerciseType"] = this.exerciseType;
        data["profileImageUrl"] = this.profileImageUrl;
        data["immediateAvailability"] = this.immediateAvailability;
        return data;
    }
}

export interface IGetVetsResponse {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    officeName?: string | undefined;
    addresses?: Address;
    animalNames?: string[] | undefined;
    procedureNames?: string[] | undefined;
    distance?: number | undefined;
    exerciseType?: ExerciseType;
    profileImageUrl?: string | undefined;
    immediateAvailability?: AvailabilityStatus;
}

export class InscriptionVetRequest implements IInscriptionVetRequest {
    firstName!: string | undefined;
    lastName!: string | undefined;
    officeName?: string | undefined;
    email!: string | undefined;
    phone!: string | undefined;
    orderNumber!: string | undefined;
    isRgpdAccepted!: boolean;
    street!: string | undefined;
    city!: string | undefined;
    zipCode!: string | undefined;
    streetNumber!: string | undefined;
    password!: string | undefined;
    country!: string | undefined;
    box?: string | undefined;

    constructor(data?: IInscriptionVetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.officeName = _data["officeName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.orderNumber = _data["orderNumber"];
            this.isRgpdAccepted = _data["isRgpdAccepted"];
            this.street = _data["street"];
            this.city = _data["city"];
            this.zipCode = _data["zipCode"];
            this.streetNumber = _data["streetNumber"];
            this.password = _data["password"];
            this.country = _data["country"];
            this.box = _data["box"];
        }
    }

    static fromJS(data: any): InscriptionVetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new InscriptionVetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["officeName"] = this.officeName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["orderNumber"] = this.orderNumber;
        data["isRgpdAccepted"] = this.isRgpdAccepted;
        data["street"] = this.street;
        data["city"] = this.city;
        data["zipCode"] = this.zipCode;
        data["streetNumber"] = this.streetNumber;
        data["password"] = this.password;
        data["country"] = this.country;
        data["box"] = this.box;
        return data;
    }
}

export interface IInscriptionVetRequest {
    firstName: string | undefined;
    lastName: string | undefined;
    officeName?: string | undefined;
    email: string | undefined;
    phone: string | undefined;
    orderNumber: string | undefined;
    isRgpdAccepted: boolean;
    street: string | undefined;
    city: string | undefined;
    zipCode: string | undefined;
    streetNumber: string | undefined;
    password: string | undefined;
    country: string | undefined;
    box?: string | undefined;
}

export class InvalidId implements IInvalidId {

    constructor(data?: IInvalidId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): InvalidId {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IInvalidId {
}

export class LegalInformation implements ILegalInformation {
    tva?: string | undefined;
    orderNumber!: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: ILegalInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tva = _data["tva"];
            this.orderNumber = _data["orderNumber"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): LegalInformation {
        data = typeof data === 'object' ? data : {};
        let result = new LegalInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tva"] = this.tva;
        data["orderNumber"] = this.orderNumber;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface ILegalInformation {
    tva?: string | undefined;
    orderNumber: string | undefined;
    isCompleted?: boolean;
}

export class LoginAdminRequest implements ILoginAdminRequest {
    email!: string | undefined;
    password!: string | undefined;

    constructor(data?: ILoginAdminRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginAdminRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginAdminRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginAdminRequest {
    email: string | undefined;
    password: string | undefined;
}

export class LoginVetRequest implements ILoginVetRequest {
    email!: string | undefined;
    password!: string | undefined;

    constructor(data?: ILoginVetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginVetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginVetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginVetRequest {
    email: string | undefined;
    password: string | undefined;
}

export class PlaceAutocompleteResult implements IPlaceAutocompleteResult {
    readonly placeId?: string | undefined;
    readonly street?: string | undefined;
    readonly number?: string | undefined;
    readonly city?: string | undefined;
    readonly country?: string | undefined;
    readonly fullAddress?: string | undefined;

    constructor(data?: IPlaceAutocompleteResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).placeId = _data["placeId"];
            (<any>this).street = _data["street"];
            (<any>this).number = _data["number"];
            (<any>this).city = _data["city"];
            (<any>this).country = _data["country"];
            (<any>this).fullAddress = _data["fullAddress"];
        }
    }

    static fromJS(data: any): PlaceAutocompleteResult {
        data = typeof data === 'object' ? data : {};
        let result = new PlaceAutocompleteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["placeId"] = this.placeId;
        data["street"] = this.street;
        data["number"] = this.number;
        data["city"] = this.city;
        data["country"] = this.country;
        data["fullAddress"] = this.fullAddress;
        return data;
    }
}

export interface IPlaceAutocompleteResult {
    placeId?: string | undefined;
    street?: string | undefined;
    number?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    fullAddress?: string | undefined;
}

export class Presentation implements IPresentation {
    message?: string | undefined;
    diploma?: string | undefined;
    languages?: string[] | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: IPresentation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.diploma = _data["diploma"];
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): Presentation {
        data = typeof data === 'object' ? data : {};
        let result = new Presentation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["diploma"] = this.diploma;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IPresentation {
    message?: string | undefined;
    diploma?: string | undefined;
    languages?: string[] | undefined;
    isCompleted?: boolean;
}

export class Pricing implements IPricing {
    officePricing?: string | undefined;
    homePricing?: string | undefined;
    additionalPricing?: string | undefined;
    readonly isCompleted?: boolean;

    constructor(data?: IPricing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.officePricing = _data["officePricing"];
            this.homePricing = _data["homePricing"];
            this.additionalPricing = _data["additionalPricing"];
            (<any>this).isCompleted = _data["isCompleted"];
        }
    }

    static fromJS(data: any): Pricing {
        data = typeof data === 'object' ? data : {};
        let result = new Pricing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["officePricing"] = this.officePricing;
        data["homePricing"] = this.homePricing;
        data["additionalPricing"] = this.additionalPricing;
        data["isCompleted"] = this.isCompleted;
        return data;
    }
}

export interface IPricing {
    officePricing?: string | undefined;
    homePricing?: string | undefined;
    additionalPricing?: string | undefined;
    isCompleted?: boolean;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class Procedure implements IProcedure {
    id!: number;
    name!: string | undefined;
    isActive?: boolean;

    constructor(data?: IProcedure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): Procedure {
        data = typeof data === 'object' ? data : {};
        let result = new Procedure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IProcedure {
    id: number;
    name: string | undefined;
    isActive?: boolean;
}

export class ProcedureType implements IProcedureType {
    id!: number;
    name!: string | undefined;
    procedures?: Procedure[] | undefined;

    constructor(data?: IProcedureType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["procedures"])) {
                this.procedures = [] as any;
                for (let item of _data["procedures"])
                    this.procedures!.push(Procedure.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcedureType {
        data = typeof data === 'object' ? data : {};
        let result = new ProcedureType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.procedures)) {
            data["procedures"] = [];
            for (let item of this.procedures)
                data["procedures"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IProcedureType {
    id: number;
    name: string | undefined;
    procedures?: Procedure[] | undefined;
}

export class PublicVet implements IPublicVet {
    id?: number;
    accessibilityAndParking!: AccessibilityAndParking;
    appointment!: Appointment;
    coordonate!: Coordonate;
    emergency!: Emergency;
    pricing!: Pricing;
    presentation!: Presentation;
    legalInformation!: LegalInformation;
    isActive?: boolean;
    address?: Address;
    vetProcedures?: VetAnimalProcedure[] | undefined;
    completedPercentage?: number;
    timeSlots?: DaySlot[] | undefined;
    languages?: string[] | undefined;
    immediateAvailability?: AvailabilityStatus;
    profileImageUrl?: string | undefined;
    exerciseType?: ExerciseType;

    constructor(data?: IPublicVet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.accessibilityAndParking = new AccessibilityAndParking();
            this.appointment = new Appointment();
            this.coordonate = new Coordonate();
            this.emergency = new Emergency();
            this.pricing = new Pricing();
            this.presentation = new Presentation();
            this.legalInformation = new LegalInformation();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accessibilityAndParking = _data["accessibilityAndParking"] ? AccessibilityAndParking.fromJS(_data["accessibilityAndParking"]) : new AccessibilityAndParking();
            this.appointment = _data["appointment"] ? Appointment.fromJS(_data["appointment"]) : new Appointment();
            this.coordonate = _data["coordonate"] ? Coordonate.fromJS(_data["coordonate"]) : new Coordonate();
            this.emergency = _data["emergency"] ? Emergency.fromJS(_data["emergency"]) : new Emergency();
            this.pricing = _data["pricing"] ? Pricing.fromJS(_data["pricing"]) : new Pricing();
            this.presentation = _data["presentation"] ? Presentation.fromJS(_data["presentation"]) : new Presentation();
            this.legalInformation = _data["legalInformation"] ? LegalInformation.fromJS(_data["legalInformation"]) : new LegalInformation();
            this.isActive = _data["isActive"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : <any>undefined;
            if (Array.isArray(_data["vetProcedures"])) {
                this.vetProcedures = [] as any;
                for (let item of _data["vetProcedures"])
                    this.vetProcedures!.push(VetAnimalProcedure.fromJS(item));
            }
            this.completedPercentage = _data["completedPercentage"];
            if (Array.isArray(_data["timeSlots"])) {
                this.timeSlots = [] as any;
                for (let item of _data["timeSlots"])
                    this.timeSlots!.push(DaySlot.fromJS(item));
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            this.immediateAvailability = _data["immediateAvailability"];
            this.profileImageUrl = _data["profileImageUrl"];
            this.exerciseType = _data["exerciseType"];
        }
    }

    static fromJS(data: any): PublicVet {
        data = typeof data === 'object' ? data : {};
        let result = new PublicVet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accessibilityAndParking"] = this.accessibilityAndParking ? this.accessibilityAndParking.toJSON() : <any>undefined;
        data["appointment"] = this.appointment ? this.appointment.toJSON() : <any>undefined;
        data["coordonate"] = this.coordonate ? this.coordonate.toJSON() : <any>undefined;
        data["emergency"] = this.emergency ? this.emergency.toJSON() : <any>undefined;
        data["pricing"] = this.pricing ? this.pricing.toJSON() : <any>undefined;
        data["presentation"] = this.presentation ? this.presentation.toJSON() : <any>undefined;
        data["legalInformation"] = this.legalInformation ? this.legalInformation.toJSON() : <any>undefined;
        data["isActive"] = this.isActive;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        if (Array.isArray(this.vetProcedures)) {
            data["vetProcedures"] = [];
            for (let item of this.vetProcedures)
                data["vetProcedures"].push(item ? item.toJSON() : <any>undefined);
        }
        data["completedPercentage"] = this.completedPercentage;
        if (Array.isArray(this.timeSlots)) {
            data["timeSlots"] = [];
            for (let item of this.timeSlots)
                data["timeSlots"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        data["immediateAvailability"] = this.immediateAvailability;
        data["profileImageUrl"] = this.profileImageUrl;
        data["exerciseType"] = this.exerciseType;
        return data;
    }
}

export interface IPublicVet {
    id?: number;
    accessibilityAndParking: AccessibilityAndParking;
    appointment: Appointment;
    coordonate: Coordonate;
    emergency: Emergency;
    pricing: Pricing;
    presentation: Presentation;
    legalInformation: LegalInformation;
    isActive?: boolean;
    address?: Address;
    vetProcedures?: VetAnimalProcedure[] | undefined;
    completedPercentage?: number;
    timeSlots?: DaySlot[] | undefined;
    languages?: string[] | undefined;
    immediateAvailability?: AvailabilityStatus;
    profileImageUrl?: string | undefined;
    exerciseType?: ExerciseType;
}

export class Schedule implements ISchedule {
    day?: Date;
    slots?: ScheduleSlot[] | undefined;
    isDayClose?: boolean;

    constructor(data?: ISchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.day = _data["day"] ? new Date(_data["day"].toString()) : <any>undefined;
            if (Array.isArray(_data["slots"])) {
                this.slots = [] as any;
                for (let item of _data["slots"])
                    this.slots!.push(ScheduleSlot.fromJS(item));
            }
            this.isDayClose = _data["isDayClose"];
        }
    }

    static fromJS(data: any): Schedule {
        data = typeof data === 'object' ? data : {};
        let result = new Schedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day ? this.day.toISOString() : <any>undefined;
        if (Array.isArray(this.slots)) {
            data["slots"] = [];
            for (let item of this.slots)
                data["slots"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isDayClose"] = this.isDayClose;
        return data;
    }
}

export interface ISchedule {
    day?: Date;
    slots?: ScheduleSlot[] | undefined;
    isDayClose?: boolean;
}

export class ScheduleSlot implements IScheduleSlot {
    start?: Date;
    end?: Date;
    scheduleType?: ScheduleType;

    constructor(data?: IScheduleSlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>undefined;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>undefined;
            this.scheduleType = _data["scheduleType"];
        }
    }

    static fromJS(data: any): ScheduleSlot {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleSlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>undefined;
        data["end"] = this.end ? this.end.toISOString() : <any>undefined;
        data["scheduleType"] = this.scheduleType;
        return data;
    }
}

export interface IScheduleSlot {
    start?: Date;
    end?: Date;
    scheduleType?: ScheduleType;
}

export enum ScheduleType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class TimeSlot implements ITimeSlot {
    start!: string;
    end!: string;
    description?: string | undefined;
    readonly id?: number;
    isClose?: boolean;

    constructor(data?: ITimeSlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"];
            this.end = _data["end"];
            this.description = _data["description"];
            (<any>this).id = _data["id"];
            this.isClose = _data["isClose"];
        }
    }

    static fromJS(data: any): TimeSlot {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start;
        data["end"] = this.end;
        data["description"] = this.description;
        data["id"] = this.id;
        data["isClose"] = this.isClose;
        return data;
    }
}

export interface ITimeSlot {
    start: string;
    end: string;
    description?: string | undefined;
    id?: number;
    isClose?: boolean;
}

export class VetAnimalProcedure implements IVetAnimalProcedure {
    procedureId?: number;
    vetId!: number;
    animalId!: number;
    animalName?: string | undefined;
    procedureType?: ProcedureType;

    constructor(data?: IVetAnimalProcedure) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.procedureId = _data["procedureId"];
            this.vetId = _data["vetId"];
            this.animalId = _data["animalId"];
            this.animalName = _data["animalName"];
            this.procedureType = _data["procedureType"] ? ProcedureType.fromJS(_data["procedureType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VetAnimalProcedure {
        data = typeof data === 'object' ? data : {};
        let result = new VetAnimalProcedure();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["procedureId"] = this.procedureId;
        data["vetId"] = this.vetId;
        data["animalId"] = this.animalId;
        data["animalName"] = this.animalName;
        data["procedureType"] = this.procedureType ? this.procedureType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IVetAnimalProcedure {
    procedureId?: number;
    vetId: number;
    animalId: number;
    animalName?: string | undefined;
    procedureType?: ProcedureType;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}